// SPDX-FileCopyrightText: 2024 Chief-Engineer <119664036+Chief-Engineer@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 Repo <47093363+Titian3@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <comedian_vs_clown@hotmail.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 ReserveBot <211949879+ReserveBot@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 SX-7 <sn1.test.preria.2002@gmail.com>
// SPDX-FileCopyrightText: 2025 Svarshik <96281939+lexaSvarshik@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 nazrin <tikufaev@outlook.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Client.Stylesheets;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Player;
using Robust.Shared.Configuration;
using Robust.Shared.Network;

namespace Content.Client.Administration.UI.CustomControls;

[GenerateTypedNameReferences]
public sealed partial class PlayerListEntry : BoxContainer
{
    private readonly IPlayerManager _playerManager; //EE multiauth
    private readonly IConfigurationManager _config; //EE multiauth
    public PlayerListEntry()
    {
        RobustXamlLoader.Load(this);
        _playerManager = IoCManager.Resolve<IPlayerManager>(); //EE multiauth
        _config = IoCManager.Resolve<IConfigurationManager>(); //EE multiauth
    }

    public event Action<PlayerInfo>? OnPinStatusChanged;

    public void Setup(PlayerInfo info, Func<PlayerInfo, string, string>? overrideText)
    {
        Update(info, overrideText);
        PlayerEntryPinButton.OnPressed += HandlePinButtonPressed(info);
    }

    private Action<BaseButton.ButtonEventArgs> HandlePinButtonPressed(PlayerInfo info)
    {
        return args =>
        {
            info.IsPinned = !info.IsPinned;
            UpdatePinButtonTexture(info.IsPinned);
            OnPinStatusChanged?.Invoke(info);
        };
    }

    private void Update(PlayerInfo info, Func<PlayerInfo, string, string>? overrideText)
    {
        //EE multiauth begin
        if (!_playerManager.TryGetSessionById(info.SessionId, out var session))
        {
            PlayerEntryLabel.Text = $"{info.CharacterName} ({info.Username}) [DISCONNECTED]";
            UpdatePinButtonTexture(info.IsPinned);
            return;
        }

        var authUrl = session.Channel?.UserData?.AuthServer;
        var serverRecord = authUrl != null
            ? AuthServer.GetServerFromCVarListByUrl(_config, authUrl)
            : null;

        var baseText = serverRecord?.Id is { } id
            ? $"{info.CharacterName} ({info.Username})@{id}"
            : $"{info.CharacterName} ({info.Username})";

        PlayerEntryLabel.Text = overrideText?.Invoke(info, baseText)
                               ?? baseText;
        //EE multiauth end

        UpdatePinButtonTexture(info.IsPinned);
    }

    private void UpdatePinButtonTexture(bool isPinned)
    {
        if (isPinned)
        {
            PlayerEntryPinButton?.RemoveStyleClass(StyleNano.StyleClassPinButtonUnpinned);
            PlayerEntryPinButton?.AddStyleClass(StyleNano.StyleClassPinButtonPinned);
        }
        else
        {
            PlayerEntryPinButton?.RemoveStyleClass(StyleNano.StyleClassPinButtonPinned);
            PlayerEntryPinButton?.AddStyleClass(StyleNano.StyleClassPinButtonUnpinned);
        }
    }
}
